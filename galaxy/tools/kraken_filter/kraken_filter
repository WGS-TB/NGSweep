#!/usr/bin/env python

import os
import gzip
import sys
import argparse as ap
import shutil
from ete3 import NCBITaxa

def openfile(file, mode='r'):
    try:
        infile = gzip.open(file, mode)
    except:
        infile = open(file, mode)
    return infile


def parse_kraken_results(report, taxid):
    kraken = {}  # Store classification for each read
    ncbi = NCBITaxa()
    descendants = ncbi.get_descendant_taxa(taxid)

    with open(report, 'r') as classification:
        for line in classification:
            classified, read_id, tax_id, length, details = line.strip().split("\t")
            kraken[read_id] = tax_id

    # Classify each read
    kraken_class = {}

    for read_id, tax_id in kraken.items():
        if tax_id == 0:
            kraken_class[read_id] = "unclassified"
        elif int(tax_id) in descendants or int(tax_id) == int(taxid):
            kraken_class[read_id] = "target"
        else:
            kraken_class[read_id] = "other"

    return kraken_class


def kraken_trim(report, taxid, paired, fastq, fastq2):
    kraken = parse_kraken_results(report, taxid)

    # Write new fastq file
    if paired:
        files = [fastq, fastq2]
    else:
        files = [fastq]
    for fastq_in in files:
        with openfile(fastq_in) as f_in:
            fastq_out = os.path.split(fastq_in)[1]
            if fastq_out[-3:] == ".gz":  # Eliminate .gz from filename
                fastq_out = fastq_out[:-3]
            with open(os.path.join('kraken_filtered', '%s' % fastq_out), 'w') as f_out:
                 for line in f_in:
                    # Split ID with space, then remove "/1" or "/2" if it exists and ignore initial @
                    read_id = line.decode('utf-8').split(" ")[0].split("/")[0][1:]
                    if read_id in kraken and kraken[read_id] != "other":
                        f_out.write(line.decode('utf-8'))
                        for i in range(3):
                            f_out.write(f_in.readline().decode('utf-8'))
                    else:
                        for i in range(3):
                            f_in.readline()

        # Zip output files
        with gzip.open(os.path.join('kraken_filtered', '%s.gz' % fastq_out), 'wb') as gzipped:
            shutil.copyfileobj(fastq_out, gzipped)

parser = ap.ArgumentParser(prog='kraken_trim', conflict_handler='resolve',
                           description="Trims contaminated reads using Kraken reports")

input = parser.add_argument_group('Input', '')
input.add_argument('report', help="Kraken report")
input.add_argument('taxid', type=int, help="Target taxonomic ID")
input.add_argument('fastq', help="FASTQ file")
input.add_argument('fastq2', nargs='?', help="Reverse FASTQ mate ")
input.add_argument('--p', '--paired', action='store_true', help="Paired FASTQ files")

if len(sys.argv) == 1:
    parser.print_usage()
    sys.exit(1)

args = parser.parse_args()

if not os.path.exists('kraken_filtered'):
    os.makedirs('kraken_filtered')

kraken_trim(args.report, args.taxid, args.paired, args.fastq, args.fastq2)