#!/usr/bin/env python

# Usage:

import sys
import re
import os
import gzip
import argparse as ap

"""Check mate pair headers (in case fastq files were not downloaded with the -origfmt flag using fastq-dump)"""
def check_headers(forward, reverse):
    firstLineForward = open(forward, 'r').readline()
    firstLineBackward = open(reverse, 'r').readline()

    if firstLineForward == firstLineBackward: # If the headers are the same (unmodified)
        return

    forwardPaired = firstLineForward.find("/1")
    backwardPaired = firstLineBackward.find("/2")

    if firstLineForward[:forwardPaired] == firstLineBackward[:backwardPaired]: # Paired read identifiers present
        return

    if re.search('(\.1){2}', firstLineForward):
        for i in range(1,3):
            new_file = ""
            with gzip.open(os.path.join(input, accession+"_%d"+file_type) % i, 'r') as mate:
                for line in mate.readlines():
                    line = line.decode('utf-8')
                    if "%s" % accession in line:
                        split = line.split()
                        header = "%s %s" % (split[0][:-2], split[1]+"/%d\n" % i)
                        new_file += header
                        continue
                    new_file += line
            with gzip.open(os.path.join(input, accession+"_%d"+file_type) % i, 'wb') as mate:
                mate.write(str.encode(new_file))


parser = ap.ArgumentParser(prog='normalize_header', conflict_handler='resolve',
                           description="Normalizes ")

input = parser.add_argument_group('Input', '')
input.add_argument('fastq', help="FASTQ file")
input.add_argument('fastq2', help="Reverse FASTQ mate")

if len(sys.argv) == 1:
    parser.print_usage()
    sys.exit(1)

args = parser.parse_args()

forward = args.fastq
reverse = args.fastq2
check_headers(forward, reverse)

